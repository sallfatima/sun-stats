import chainlit as cl
import sys
import os

# Ajouter le r√©pertoire src au path Python
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

# Import direct du Simple RAG
try:
    from simple_rag.graph import graph as simple_rag_graph
    RAG_AVAILABLE = True
    print("‚úÖ Simple RAG charg√© avec succ√®s")
except ImportError as e:
    print(f"‚ùå Erreur d'import Simple RAG: {e}")
    RAG_AVAILABLE = False

async def call_simple_rag(user_input: str, chat_history: list):
    """Appelle le Simple RAG avec le message utilisateur"""
    
    if not RAG_AVAILABLE:
        return "‚ùå Simple RAG non disponible", []
    
    try:
        from langchain_core.messages import HumanMessage, AIMessage
        
        # Convertir l'historique en messages LangChain
        messages = []
        for user_msg, bot_msg in chat_history:
            messages.append(HumanMessage(content=user_msg))
            messages.append(AIMessage(content=bot_msg))
        
        # Ajouter le message actuel
        messages.append(HumanMessage(content=user_input))
        
        # Configuration par d√©faut
        config = None
        
        print(f"üîç Appel Simple RAG avec {len(messages)} messages")
        
        # Appeler le graphique Simple RAG sans configuration sp√©cifique
        result = await simple_rag_graph.ainvoke({"messages": messages}, config=config)
        
        # Extraire la r√©ponse
        if "messages" in result and result["messages"]:
            answer = result["messages"][-1].content
            print(f"‚úÖ R√©ponse g√©n√©r√©e: {len(answer)} caract√®res")
        else:
            answer = "‚ùå Aucune r√©ponse g√©n√©r√©e par Simple RAG"
        
        # Extraire les documents sources
        sources = result.get("documents", [])
        print(f"üìÑ Documents r√©cup√©r√©s: {len(sources)}")
        
        return answer, sources
        
    except Exception as e:
        print(f"‚ùå Erreur Simple RAG: {e}")
        import traceback
        traceback.print_exc()
        return f"‚ùå Erreur technique: {str(e)}", []

@cl.on_chat_start
async def on_chat_start():
    """Initialisation du chat Simple RAG"""
    
    if not RAG_AVAILABLE:
        await cl.Message(
            content="‚ùå **Simple RAG non disponible**\n\n"
                   "V√©rifiez que le module simple_rag est correctement install√©."
        ).send()
        return
    
    # Message de bienvenue
    welcome_message = """üá∏üá≥ **Bienvenue dans Sunu-Stats - ANSD**

**Assistant Intelligent pour les Statistiques du S√©n√©gal**


üìä **Donn√©es disponibles :**
‚Ä¢ **RGPH** - Recensement G√©n√©ral de la Population et de l'Habitat
‚Ä¢ **EDS** - Enqu√™te D√©mographique et de Sant√©  
‚Ä¢ **ESPS/EHCVM** - Enqu√™tes sur la Pauvret√© et Conditions de Vie
‚Ä¢ **ENES** - Enqu√™te Nationale sur l'Emploi
‚Ä¢ **Comptes Nationaux** - Donn√©es √©conomiques

üí° **Exemples de questions :**
‚Ä¢ Quelle est la population du S√©n√©gal selon le dernier RGPH ?
‚Ä¢ Quel est le taux de pauvret√© au S√©n√©gal ?
‚Ä¢ Comment √©volue le taux d'alphab√©tisation ?
‚Ä¢ Quels sont les indicateurs de sant√© maternelle ?

üÜò **Aide :** Tapez `/help` pour plus d'informations

Posez vos questions sur les statistiques et enqu√™tes nationales !"""

    await cl.Message(content=welcome_message).send()
    
    # Initialiser l'historique du chat
    cl.user_session.set("chat_history", [])

@cl.on_message
async def main(message):
    """Traitement principal des messages avec Simple RAG"""
    
    content = message.content.strip()
    
    # Gestion des commandes sp√©ciales
    if content.lower() == "/help":
        help_text = """**üÜò Aide Sunu-Stats - ANSD**

**üìã Commandes disponibles :**
‚Ä¢ `/help` - Afficher cette aide
‚Ä¢ `/clear` - Effacer l'historique de conversation

**üìä Types de donn√©es disponibles :**
‚Ä¢ **D√©mographiques** - Population, natalit√©, mortalit√©
‚Ä¢ **√âconomiques** - PIB, pauvret√©, emploi, croissance
‚Ä¢ **Sociales** - √âducation, sant√©, alphab√©tisation
‚Ä¢ **G√©ographiques** - R√©gions, d√©partements, communes

**üéØ Types d'enqu√™tes ANSD :**
‚Ä¢ **RGPH** - Recensement (donn√©es population/habitat)
‚Ä¢ **EDS** - Enqu√™te D√©mographique et Sant√©
‚Ä¢ **ESPS** - Enqu√™te Suivi Pauvret√© S√©n√©gal
‚Ä¢ **EHCVM** - Enqu√™te Conditions Vie M√©nages
‚Ä¢ **ENES** - Enqu√™te Nationale Emploi S√©n√©gal

**üí° Conseils pour de meilleures r√©ponses :**
‚Ä¢ Soyez sp√©cifique dans vos questions
‚Ä¢ Mentionnez l'ann√©e si important
‚Ä¢ Pr√©cisez la r√©gion si n√©cessaire
‚Ä¢ Demandez des sources pr√©cises

**üîß Syst√®me :** Simple RAG avec base documentaire ANSD"""

        await cl.Message(content=help_text).send()
        return
    
    if content.lower() == "/clear":
        cl.user_session.set("chat_history", [])
        await cl.Message(
            content="üßπ **Historique effac√©**\n\nVous pouvez recommencer une nouvelle conversation."
        ).send()
        return
    
    # V√©rifier que Simple RAG est disponible
    if not RAG_AVAILABLE:
        await cl.Message(
            content="‚ùå Simple RAG non disponible. Red√©marrez l'application."
        ).send()
        return
    
    # Traitement du message principal
    try:
        # R√©cup√©rer l'historique
        chat_history = cl.user_session.get("chat_history", [])
        
        # Limiter l'historique pour √©viter de surcharger
        short_history = chat_history[-5:]  # Garder les 5 derniers √©changes
        
        # Afficher indicateur de traitement
        processing_msg = await cl.Message(
            content="üîç **Recherche en cours...**\n\n"
                   "‚Ä¢ R√©cup√©ration des documents ANSD\n"
                   "‚Ä¢ Analyse des donn√©es statistiques\n"
                   "‚Ä¢ G√©n√©ration de la r√©ponse..."
        ).send()
        
        # Appeler Simple RAG
        answer, sources = await call_simple_rag(content, short_history)
        
        # Supprimer le message de traitement
        await processing_msg.remove()
        
        # Mettre √† jour l'historique
        chat_history.append((content, answer))
        cl.user_session.set("chat_history", chat_history)
        
        # Pr√©parer la r√©ponse finale
        response_content = f"**üìä Sunu-Stats - ANSD r√©pond :**\n\n{answer}"
        
        # Ajouter informations sur les sources si disponibles
        if sources and len(sources) > 0:
            response_content += f"\n\nüìö **Sources consult√©es :** {len(sources)} document(s) ANSD"
        
        # Envoyer la r√©ponse
        await cl.Message(content=response_content).send()
        
        # Optionnel: Afficher d√©tails des sources pour debug
        if sources and len(sources) > 0:
            sources_text = f"üìÑ **D√©tails des sources :**\n\n"
            for i, doc in enumerate(sources[:3], 1):  # Limiter √† 3 sources
                if hasattr(doc, 'metadata') and doc.metadata:
                    pdf_name = doc.metadata.get('pdf_name', 'Document ANSD')
                    page_num = doc.metadata.get('page_num', 'N/A')
                    if '/' in pdf_name:
                        pdf_name = pdf_name.split('/')[-1]
                    sources_text += f"‚Ä¢ **Source {i}:** {pdf_name}"
                    if page_num != 'N/A':
                        sources_text += f" (page {page_num})"
                    sources_text += "\n"
                else:
                    sources_text += f"‚Ä¢ **Source {i}:** Document ANSD\n"
            
            # Envoyer les d√©tails des sources (optionnel, d√©commentez si souhait√©)
            # await cl.Message(content=sources_text).send()
        
    except Exception as e:
        await cl.Message(
            content=f"‚ùå **Erreur lors du traitement**\n\n"
                   f"Une erreur technique s'est produite :\n"
                   f"`{str(e)}`\n\n"
                   f"Veuillez r√©essayer ou reformuler votre question."
        ).send()
        
        print(f"‚ùå Erreur d√©taill√©e: {e}")
        import traceback
        traceback.print_exc()

# Configuration optionnelle pour le d√©bogage
if __name__ == "__main__":
    print("üöÄ D√©marrage Sunu-Stats - ANSD (Simple RAG)")
    print(f"üìä Simple RAG disponible: {RAG_AVAILABLE}")
    
    if RAG_AVAILABLE:
        print("‚úÖ Pr√™t √† r√©pondre aux questions sur les statistiques du S√©n√©gal")
    else:
        print("‚ùå V√©rifiez l'installation du module simple_rag")