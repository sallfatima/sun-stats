# streamlit_app.py

import streamlit as st
from src.simple_rag.graph import RAGGraph

# --- Initialisation du chatbot ---
@st.cache_resource(show_spinner=False)
def init_chatbot():
    """
    CrÃ©e une instance unique du RAGGraph (chargement FAISS + LLM).
    """
    return RAGGraph()

chatbot = init_chatbot()

# --- Configuration de la page Streamlit ---
st.set_page_config(
    page_title="Chatbot RGPH â€“ ANSD",
    page_icon="ðŸ¤–",
    layout="wide",
)

st.title("ðŸ¤– Chatbot RGPH â€“ ANSD (FAISS local)")
st.markdown(
    "Posez des questions sur les rapports RGPH et obtenez des rÃ©ponses sourcÃ©es par FAISS + GPT-3.5."
)

# --- Gestion de lâ€™historique de la conversation dans la session ---
if "chat_history" not in st.session_state:
    st.session_state.chat_history = []  # liste de tuples (question, rÃ©ponse)

# Champ de saisie utilisateur
question = st.text_input("Votre question :", key="input_question")

# Lorsque lâ€™utilisateur appuie sur EntrÃ©e ou le bouton Â« Envoyer Â»
if st.button("Envoyer") and question.strip():
    with st.spinner("ðŸ¤” Recherche et gÃ©nÃ©ration en coursâ€¦"):
        # RÃ©cupÃ¨re la rÃ©ponse et les documents sources
        answer, sources = chatbot.ask(question, st.session_state.chat_history)
        # Enregistrer dans lâ€™historique
        st.session_state.chat_history.append((question, answer, sources))
   

# Affichage de lâ€™historique (derniÃ¨res questions/rÃ©ponses)
if st.session_state.chat_history:
    for i, (q, a, sources) in enumerate(st.session_state.chat_history):
        st.markdown(f"**Vous :** {q}")
        st.markdown(f"**Bot :** {a}")
        # Afficher la liste des sources sous forme de liste Ã  puces Â± page/ID
        with st.expander("Voir les documents sources"):
            for doc in sources:
                src_pdf = doc.metadata.get("source_pdf", "inconnu")
                chunk_id = doc.metadata.get("chunk", "?")
                st.write(f"â€¢ `{src_pdf}` â€“ chunk `{chunk_id}`")
        st.markdown("---")
