# =============================================================================
# src/simple_rag/graph.py - VERSION COMPL√àTE AVEC VISUELS ET SUGGESTIONS
# =============================================================================

### Nodes

from langchain import hub
from langchain_core.messages import HumanMessage, AIMessage

from langgraph.graph import END, START, StateGraph

from shared import retrieval
from shared.utils import load_chat_model
from simple_rag.configuration import RagConfiguration
from simple_rag.state import GraphState, InputState
from langchain_core.prompts import PromptTemplate
from langchain.prompts import ChatPromptTemplate
import re
import base64
from pathlib import Path
from typing import List, Dict, Any, Optional

# Imports pour l'affichage visuel (conditionnel selon votre framework)
try:
    # Pour Chainlit
    import chainlit as cl
    CHAINLIT_AVAILABLE = True
except ImportError:
    CHAINLIT_AVAILABLE = False

try:
    # Pour Streamlit
    import streamlit as st
    STREAMLIT_AVAILABLE = True
except ImportError:
    STREAMLIT_AVAILABLE = False

# =============================================================================
# PROMPT SYSTEM AM√âLIOR√â POUR L'ANSD
# =============================================================================

IMPROVED_ANSD_SYSTEM_PROMPT = """Vous √™tes un expert statisticien de l'ANSD (Agence Nationale de la Statistique et de la D√©mographie du S√©n√©gal), sp√©cialis√© dans l'analyse de donn√©es d√©mographiques, √©conomiques et sociales du S√©n√©gal.

MISSION PRINCIPALE :
R√©pondre de mani√®re compl√®te et approfondie aux questions sur les statistiques du S√©n√©gal en utilisant PRIORITAIREMENT les documents fournis et en compl√©tant avec vos connaissances des publications officielles de l'ANSD.

SOURCES AUTORIS√âES :
‚úÖ Documents fournis dans le contexte (PRIORIT√â ABSOLUE)
‚úÖ Connaissances des rapports officiels ANSD publi√©s
‚úÖ Donn√©es du site officiel ANSD (www.ansd.sn)
‚úÖ Publications officielles des enqu√™tes ANSD (RGPH, EDS, ESPS, EHCVM, ENES)
‚úÖ Comptes nationaux et statistiques √©conomiques officielles du S√©n√©gal
‚úÖ Projections d√©mographiques officielles de l'ANSD

‚ùå SOURCES INTERDITES :
‚ùå Donn√©es d'autres pays pour combler les lacunes
‚ùå Estimations personnelles non bas√©es sur les sources ANSD
‚ùå Informations non officielles ou de sources tierces
‚ùå Projections personnelles non document√©es

R√àGLES DE R√âDACTION :
‚úÖ R√©ponse directe : SANS limitation de phrases - d√©veloppez autant que n√©cessaire
‚úÖ Contexte additionnel : SANS limitation - incluez toutes les informations pertinentes
‚úÖ Citez TOUJOURS vos sources pr√©cises (document + page ou publication ANSD)
‚úÖ Distinguez clairement les donn√©es des documents fournis vs connaissances ANSD
‚úÖ Donnez les chiffres EXACTS quand disponibles
‚úÖ Pr√©cisez SYST√âMATIQUEMENT les ann√©es de r√©f√©rence
‚úÖ Mentionnez les m√©thodologies d'enqu√™te

FORMAT DE R√âPONSE OBLIGATOIRE :

**R√âPONSE DIRECTE :**
[D√©veloppez la r√©ponse de mani√®re compl√®te et d√©taill√©e, sans limitation de longueur. Incluez tous les √©l√©ments pertinents pour une compr√©hension approfondie du sujet. Vous pouvez utiliser plusieurs paragraphes et d√©velopper les aspects importants.]

**DONN√âES PR√âCISES :**
- Chiffre exact : [valeur exacte avec unit√©]
- Ann√©e de r√©f√©rence : [ann√©e pr√©cise]
- Source : [nom exact du document, page X OU publication ANSD officielle]
- M√©thodologie : [enqu√™te/recensement utilis√©]

**CONTEXTE ADDITIONNEL :**
[D√©veloppez largement avec toutes les informations compl√©mentaires pertinentes, sans limitation de longueur.]

**LIMITATIONS/NOTES :**
[Pr√©cautions d'interpr√©tation, changements m√©thodologiques, d√©finitions sp√©cifiques]

DOCUMENTS ANSD DISPONIBLES :
{context}

Analysez maintenant ces documents et r√©pondez √† la question de l'utilisateur de mani√®re compl√®te et approfondie."""

# =============================================================================
# FONCTIONS DE D√âTECTION ET TRAITEMENT DES √âL√âMENTS VISUELS
# =============================================================================

def extract_visual_elements(documents):
    """S√©pare les documents textuels et les √©l√©ments visuels - VERSION AM√âLIOR√âE."""
    
    text_docs = []
    visual_elements = []
    
    print(f"üîç Analyse de {len(documents)} documents pour √©l√©ments visuels...")
    
    for i, doc in enumerate(documents, 1):
        metadata = doc.metadata if hasattr(doc, 'metadata') else {}
        content = doc.page_content if hasattr(doc, 'page_content') else str(doc)
        
        # Diagnostic: afficher les m√©tadonn√©es importantes pour debug
        if i <= 3:  # Pour les 3 premiers documents
            print(f"  üìÑ Document {i}: {metadata.get('pdf_name', 'Unknown')[:30]}")
            important_keys = ['type', 'image_path', 'chart_type', 'is_table', 'visual_type', 'source']
            for key in important_keys:
                if key in metadata:
                    print(f"    {key}: {metadata[key]}")
        
        # D√©tection am√©lior√©e des √©l√©ments visuels
        is_visual, element_type = detect_visual_element_enhanced(doc, metadata, content)
        
        if is_visual:
            visual_element = {
                'type': element_type,
                'metadata': metadata,
                'content': content,
                'document': doc,
                'relevance_score': 0  # Sera calcul√© plus tard
            }
            visual_elements.append(visual_element)
            
            if i <= 3:
                print(f"    üé® VISUEL D√âTECT√â: {element_type}")
        else:
            text_docs.append(doc)
            if i <= 3:
                print(f"    üìù TEXTE")
    
    print(f"‚úÖ R√©sultat: {len(text_docs)} textuels, {len(visual_elements)} visuels")
    return text_docs, visual_elements

def detect_visual_element_enhanced(doc, metadata, content):
    """D√©tection am√©lior√©e des √©l√©ments visuels selon la structure de vos donn√©es."""
    
    # M√âTHODE 1: M√©tadonn√©es explicites de type visuel
    visual_type_indicators = {
        'image_path': 'visual_chart',
        'chart_type': 'visual_chart', 
        'visual_type': 'visual_chart',
        'is_table': 'visual_table',
        'table_data': 'visual_table',
        'chart_category': 'visual_chart',
        'source_type': 'visual_chart'  # Ajout pour compatibilit√©
    }
    
    for indicator, visual_type in visual_type_indicators.items():
        if indicator in metadata and metadata[indicator]:
            return True, visual_type
    
    # M√âTHODE 2: Type de document explicite
    doc_type = metadata.get('type', '').lower()
    visual_types = {
        'visual_chart': 'visual_chart',
        'visual_table': 'visual_table',
        'image': 'visual_chart',
        'chart': 'visual_chart',
        'table': 'visual_table',
        'graph': 'visual_chart',
        'figure': 'visual_chart'
    }
    
    if doc_type in visual_types:
        return True, visual_types[doc_type]
    
    # M√âTHODE 3: Analyse du nom de fichier source
    source = metadata.get('source', '').lower()
    pdf_name = metadata.get('pdf_name', '').lower()
    
    # Patterns pour images
    image_patterns = ['.png', '.jpg', '.jpeg', '.gif', '.bmp', '.svg']
    for pattern in image_patterns:
        if pattern in source:
            return True, 'visual_chart'
    
    # Patterns pour tableaux
    table_patterns = ['.csv', 'table', 'tableau']
    for pattern in table_patterns:
        if pattern in source or pattern in pdf_name:
            return True, 'visual_table'
    
    # Patterns pour graphiques
    chart_patterns = ['chart', 'graph', 'figure', 'diagramme', 'graphique']
    for pattern in chart_patterns:
        if pattern in source or pattern in pdf_name:
            return True, 'visual_chart'
    
    # M√âTHODE 4: Analyse du contenu textuel pour tableaux
    if content and is_table_content_enhanced(content):
        return True, 'visual_table'
    
    # M√âTHODE 5: Mots-cl√©s visuels dans le contenu
    if content:
        content_lower = content.lower()
        
        # Indicateurs de graphiques
        chart_keywords = [
            'graphique', 'figure', 'diagramme', 'courbe', 'histogramme', 
            'secteur', 'barres', 'camembert', 'visualisation', 'chart'
        ]
        
        chart_score = sum(1 for keyword in chart_keywords if keyword in content_lower)
        if chart_score >= 2:  # Au moins 2 indicateurs
            return True, 'visual_chart'
        
        # Indicateurs de description d'image
        image_keywords = [
            'image extraite', 'page', 'png', 'jpg', 'capture', 'screenshot'
        ]
        
        if any(keyword in content_lower for keyword in image_keywords):
            return True, 'visual_chart'
    
    # M√âTHODE 6: Patterns dans les m√©tadonn√©es pages sp√©cifiques
    page_num = metadata.get('page_num', metadata.get('page', ''))
    if page_num and ('img' in str(page_num) or 'chart' in str(page_num)):
        return True, 'visual_chart'
    
    return False, None

def is_table_content_enhanced(content: str) -> bool:
    """D√©tection am√©lior√©e du contenu tabulaire."""
    
    if not content or len(content.strip()) < 50:
        return False
    
    lines = content.split('\n')
    if len(lines) < 3:  # Minimum 3 lignes pour un tableau
        return False
    
    # Compteurs d'indicateurs de tableau
    pipe_lines = sum(1 for line in lines if '|' in line)
    tab_lines = sum(1 for line in lines if '\t' in line)
    number_lines = sum(1 for line in lines if re.search(r'\d+', line))
    
    # Mots-cl√©s de tableau
    table_keywords = [
        'total', 'sous-total', 'colonnes:', 'ligne ', 'donn√©es:',
        'tableau', 'pourcentage', '%', 'millions', 'milliards'
    ]
    
    keyword_score = sum(1 for keyword in table_keywords if keyword.lower() in content.lower())
    
    # Lignes avec structure de colonnes (espaces multiples)
    column_lines = sum(1 for line in lines if re.search(r'\s{3,}', line))
    
    # Score composite
    table_score = 0
    
    if pipe_lines >= 2:
        table_score += 3
    if tab_lines >= 2:
        table_score += 3
    if column_lines >= 3:
        table_score += 2
    if number_lines >= 3:
        table_score += 1
    if keyword_score >= 2:
        table_score += 2
    
    # Patterns de donn√©es ANSD
    ansd_patterns = [
        r'\d+\s*%',  # Pourcentages
        r'\d+\s*millions?',  # Millions
        r'\d+\s*milliards?',  # Milliards
        r'20\d{2}',  # Ann√©es
        r'r√©gion|d√©partement|urbain|rural'  # G√©ographie
    ]
    
    ansd_score = sum(1 for pattern in ansd_patterns if re.search(pattern, content, re.IGNORECASE))
    if ansd_score >= 2:
        table_score += 2
    
    return table_score >= 4

def analyze_visual_relevance_enhanced(visual_elements: List[Dict[str, Any]], user_question: str) -> List[Dict[str, Any]]:
    """Analyse am√©lior√©e de la pertinence des √©l√©ments visuels."""
    
    if not visual_elements:
        return []
    
    question_lower = user_question.lower()
    relevant_elements = []
    
    print(f"üéØ Analyse de pertinence pour {len(visual_elements)} √©l√©ments visuels...")
    
    # Mots-cl√©s th√©matiques ANSD √©tendus
    theme_keywords = {
        'd√©mographie': [
            'population', 'habitants', 'd√©mographique', 'natalit√©', 'mortalit√©', 
            '√¢ge', 'sexe', 'recensement', 'rgph'
        ],
        '√©conomie': [
            '√©conomie', 'pib', 'croissance', 'secteur', 'activit√©', 'revenus',
            'production', 'commerce', 'industrie'
        ],
        'emploi': [
            'emploi', 'travail', 'ch√¥mage', 'actifs', 'profession', 'occupation',
            'm√©tier', 'activit√©', 'enes'
        ],
        'pauvret√©': [
            'pauvret√©', 'pauvre', 'indigence', 'vuln√©rabilit√©', 'revenus',
            'm√©nage', 'esps', 'conditions'
        ],
        '√©ducation': [
            '√©ducation', '√©cole', 'scolarisation', 'alphab√©tisation', 'instruction',
            'enseignement', 'formation'
        ],
        'sant√©': [
            'sant√©', 'mortalit√©', 'vaccination', 'maternelle', 'morbidit√©',
            'm√©dical', 'eds', 'sanitaire'
        ],
        'g√©ographie': [
            'r√©gion', 'd√©partement', 'urbain', 'rural', 'ville', 'commune',
            'territorial', 'localit√©', 'zone'
        ]
    }
    
    for i, element in enumerate(visual_elements, 1):
        relevance_score = 0
        metadata = element['metadata']
        content = element['content'].lower()
        element_type = element['type']
        
        print(f"  üìä √âl√©ment {i}: {metadata.get('pdf_name', 'Unknown')[:30]}")
        
        # Score 1: Correspondance th√©matique
        theme_score = 0
        for theme, keywords in theme_keywords.items():
            if any(keyword in question_lower for keyword in keywords):
                theme_matches = sum(1 for keyword in keywords if keyword in content)
                if theme_matches > 0:
                    theme_score += theme_matches
                    print(f"    üéØ Th√®me {theme}: {theme_matches} correspondances")
        
        relevance_score += min(theme_score, 5)  # Max 5 points pour th√®me
        
        # Score 2: Mots-cl√©s directs de la question
        question_words = set(word for word in question_lower.split() if len(word) > 3)
        content_words = set(content.split())
        common_words = question_words.intersection(content_words)
        
        word_score = len(common_words)
        relevance_score += min(word_score, 3)  # Max 3 points pour mots
        
        if common_words:
            print(f"    üî§ Mots communs: {', '.join(list(common_words)[:3])}")
        
        # Score 3: Type d'√©l√©ment vs type de question
        if element_type == 'visual_table' and any(word in question_lower for word in ['combien', 'nombre', 'taux', 'pourcentage', 'donn√©es']):
            relevance_score += 2
            print(f"    üìã Bonus tableau pour question quantitative")
        
        if element_type == 'visual_chart' and any(word in question_lower for word in ['√©volution', 'tendance', 'graphique', 'comparaison']):
            relevance_score += 2
            print(f"    üìà Bonus graphique pour question visuelle")
        
        # Score 4: M√©tadonn√©es sp√©cifiques
        pdf_name = metadata.get('pdf_name', '').lower()
        if any(word in pdf_name for word in question_words):
            relevance_score += 2
            print(f"    üìÑ Bonus nom de fichier")
        
        # Score 5: Ann√©e/p√©riode
        if re.search(r'20\d{2}', question_lower) and re.search(r'20\d{2}', content):
            question_years = set(re.findall(r'20\d{2}', question_lower))
            content_years = set(re.findall(r'20\d{2}', content))
            if question_years.intersection(content_years):
                relevance_score += 3
                print(f"    üìÖ Bonus ann√©e correspondante")
        
        print(f"    ‚≠ê Score total: {relevance_score}")
        
        # Seuil de pertinence adaptatif
        min_threshold = 3 if len(visual_elements) > 10 else 2
        
        if relevance_score >= min_threshold:
            element['relevance_score'] = relevance_score
            relevant_elements.append(element)
            print(f"    ‚úÖ RETENU")
        else:
            print(f"    ‚ùå Rejet√© (seuil: {min_threshold})")
    
    # Trier par pertinence et limiter
    relevant_elements.sort(key=lambda x: x.get('relevance_score', 0), reverse=True)
    max_elements = 5  # Maximum 5 √©l√©ments visuels
    
    final_elements = relevant_elements[:max_elements]
    
    print(f"üéØ R√©sultat final: {len(final_elements)} √©l√©ments pertinents s√©lectionn√©s")
    
    return final_elements

# =============================================================================
# FONCTIONS D'AFFICHAGE VISUEL
# =============================================================================

async def display_visual_element(element: Dict[str, Any], user_question: str) -> bool:
    """Affiche un √©l√©ment visuel (graphique ou tableau)."""
    
    element_type = element['type']
    metadata = element['metadata']
    content = element['content']
    
    try:
        if element_type == 'visual_chart':
            return await display_chart_element(metadata, content)
        elif element_type == 'visual_table':
            return await display_table_element(metadata, content)
        return False
    except Exception as e:
        print(f"‚ùå Erreur affichage √©l√©ment visuel: {e}")
        return False

async def display_chart_element(metadata: Dict[str, Any], content: str) -> bool:
    """Affiche un graphique avec recherche intelligente du chemin de l'image."""
    
    # Informations du graphique
    pdf_name = metadata.get('pdf_name', 'Document ANSD')
    page_num = metadata.get('page_num', metadata.get('page', 'N/A'))
    chart_type = metadata.get('chart_type', 'graphique')
    
    # Titre et source
    title = f"üìä **{chart_type.title()}**"
    source_info = f"*Source: {pdf_name}"
    if page_num != 'N/A':
        source_info += f", page {page_num}"
    source_info += "*"
    
    print(f"üé® Tentative d'affichage: {title}")
    print(f"üîç M√©tadonn√©es image: {metadata}")
    
    # RECHERCHE INTELLIGENTE DU CHEMIN DE L'IMAGE
    image_path = None
    
    # M√©thode 1: Chercher image_path dans les m√©tadonn√©es
    for key in ['image_path', 'source', 'file_path', 'path']:
        if key in metadata and metadata[key]:
            potential_path = metadata[key]
            print(f"üîç Test chemin {key}: {potential_path}")
             
            if Path(potential_path).exists():
                image_path = potential_path
                print(f"‚úÖ Image trouv√©e: {image_path}")
                break
            else:
                # Essayer avec diff√©rents pr√©fixes
                filename = Path(potential_path).name
                for base_dir in ['images/', 'data/images/', './images/', '']:
                    test_path = Path(base_dir) / filename
                    if test_path.exists():
                        image_path = str(test_path)
                        print(f"‚úÖ Image trouv√©e (chemin alternatif): {image_path}")
                        break
                
                if image_path:
                    break
    
    # M√©thode 2: Construire le chemin √† partir du nom du PDF
    if not image_path and pdf_name and page_num != 'N/A':
        import glob
        
        # Patterns typiques pour les images extraites
        pdf_stem = Path(pdf_name).stem if '.' in pdf_name else pdf_name
        patterns = [
            f"images/{pdf_stem}*page*{page_num}*.png",
            f"images/{pdf_stem}*p{page_num}*.png", 
            f"data/images/{pdf_stem}*page*{page_num}*.png",
            f"images/*{pdf_stem}*{page_num}*.png",
            f"images/*page*{page_num}*.png"
        ]
        
        for pattern in patterns:
            matches = glob.glob(pattern)
            if matches:
                image_path = matches[0]
                print(f"‚úÖ Image trouv√©e par pattern: {image_path}")
                break
    
    # M√©thode 3: Chercher par contenu (si le contenu mentionne un nom de fichier)
    if not image_path:
        import re
        filename_match = re.search(r'([a-zA-Z0-9_-]+\.(?:png|jpg|jpeg))', content)
        if filename_match:
            filename = filename_match.group(1)
            for base_dir in ['images/', 'data/images/', './images/']:
                test_path = Path(base_dir) / filename
                if test_path.exists():
                    image_path = str(test_path)
                    print(f"‚úÖ Image trouv√©e par contenu: {image_path}")
                    break
    
    # AFFICHAGE DE L'IMAGE OU FALLBACK
    if image_path and Path(image_path).exists():
        try:
            if CHAINLIT_AVAILABLE:
                # Message avec titre et source
                await cl.Message(content=f"{title}\n\n{source_info}").send()
                
                # Afficher l'image
                elements = [cl.Image(name="chart", path=str(image_path), display="inline")]
                await cl.Message(content="", elements=elements).send()
                
                # Message de confirmation
                await cl.Message(content=f"‚úÖ Graphique affich√© depuis: `{image_path}`").send()
                
                print(f"‚úÖ Image Chainlit affich√©e: {image_path}")
                return True
                
            elif STREAMLIT_AVAILABLE:
                st.markdown(f"### {title}")
                st.markdown(source_info)
                st.image(str(image_path), caption=f"Source: {image_path}")
                print(f"‚úÖ Image Streamlit affich√©e: {image_path}")
                return True
                
            else:
                # Affichage console avec chemin de l'image
                print(f"\n{title}")
                print(source_info)
                print(f"üñºÔ∏è IMAGE DISPONIBLE: {image_path}")
                print(f"üìù Description: {content[:200]}...")
                return True
                
        except Exception as e:
            print(f"‚ùå Erreur affichage image: {e}")
    
    # FALLBACK: Afficher la description textuelle avec diagnostic
    print(f"‚ö†Ô∏è Image non trouv√©e, affichage de la description")
    
    # Message de diagnostic
    diagnostic_info = f"""
{title}

{source_info}

‚ö†Ô∏è **Image non accessible**
üîç Chemins recherch√©s:
"""
    
    # Ajouter les chemins test√©s au diagnostic
    for key in ['image_path', 'source', 'file_path']:
        if key in metadata:
            diagnostic_info += f"   ‚Ä¢ {key}: `{metadata[key]}`\n"
    
    diagnostic_info += f"\nüìù **Description du graphique :**\n{content}"
    
    if CHAINLIT_AVAILABLE:
        await cl.Message(content=diagnostic_info).send()
    elif STREAMLIT_AVAILABLE:
        st.markdown(diagnostic_info)
    else:
        print(diagnostic_info)
    
    return True

# =============================================================================
# AJOUTEZ AUSSI CETTE FONCTION DE DEBUG DANS VOTRE GRAPH.PY
# =============================================================================

def debug_visual_elements(visual_elements):
    """Debug des √©l√©ments visuels pour diagnostic."""
    
    print(f"\nüîç DEBUG: {len(visual_elements)} √©l√©ments visuels d√©tect√©s")
    print("=" * 50)
    
    for i, element in enumerate(visual_elements, 1):
        metadata = element['metadata']
        print(f"\nüìä √âl√©ment {i}:")
        print(f"   Type: {element['type']}")
        print(f"   PDF: {metadata.get('pdf_name', 'N/A')}")
        print(f"   Page: {metadata.get('page_num', metadata.get('page', 'N/A'))}")
        print(f"   Image path: {metadata.get('image_path', 'N/A')}")
        print(f"   Source: {metadata.get('source', 'N/A')}")
        print(f"   Contenu (aper√ßu): {element['content'][:100]}...")
        
        # V√©rifier si l'image existe
        image_path = metadata.get('image_path')
        if image_path:
            if Path(image_path).exists():
                print(f"   ‚úÖ Image accessible")
            else:
                print(f"   ‚ùå Image manquante")
                
                # Sugg√©rer des chemins alternatifs
                filename = Path(image_path).name
                alternatives = [
                    f"images/{filename}",
                    f"data/images/{filename}",
                    f"./images/{filename}"
                ]
                
                for alt in alternatives:
                    if Path(alt).exists():
                        print(f"   üí° Trouv√©e √†: {alt}")
                        break
async def display_chart_chainlit(metadata: Dict[str, Any], title: str, source_info: str, content: str) -> bool:
    """Affichage graphique pour Chainlit."""
    
    try:
        # Message avec titre et source
        await cl.Message(content=f"{title}\n\n{source_info}").send()
        
        # Afficher l'image si disponible
        image_path = metadata.get('image_path')
        if image_path and Path(image_path).exists():
            elements = [cl.Image(name="chart", path=str(image_path), display="inline")]
            await cl.Message(content="", elements=elements).send()
        else:
            # Fallback: afficher la description textuelle
            await cl.Message(content=f"üìà Description: {content[:500]}...").send()
        
        return True
    except Exception as e:
        print(f"‚ùå Erreur Chainlit chart: {e}")
        return False

def display_chart_streamlit(metadata: Dict[str, Any], title: str, source_info: str, content: str) -> bool:
    """Affichage graphique pour Streamlit."""
    
    try:
        st.markdown(f"### {title}")
        st.markdown(source_info)
        
        # Afficher l'image si disponible
        image_path = metadata.get('image_path')
        if image_path and Path(image_path).exists():
            st.image(str(image_path))
        else:
            # Fallback: afficher la description
            st.text(content[:500] + "..." if len(content) > 500 else content)
        
        return True
    except Exception as e:
        print(f"‚ùå Erreur Streamlit chart: {e}")
        return False

def display_chart_text(metadata: Dict[str, Any], title: str, source_info: str, content: str) -> bool:
    """Affichage textuel pour les graphiques."""
    
    print(f"\n{title}")
    print(source_info)
    print(f"üìà Contenu: {content[:300]}...")
    return True

async def display_table_element(metadata: Dict[str, Any], content: str) -> bool:
    """Affiche un tableau."""
    
    # Informations du tableau
    pdf_name = metadata.get('pdf_name', 'Document ANSD')
    page_num = metadata.get('page_num', metadata.get('page', 'N/A'))
    
    # Titre et source
    title = "üìã **Tableau de donn√©es**"
    source_info = f"*Source: {pdf_name}"
    if page_num != 'N/A':
        source_info += f", page {page_num}"
    source_info += "*"
    
    # Affichage selon le framework
    if CHAINLIT_AVAILABLE:
        return await display_table_chainlit(content, title, source_info)
    elif STREAMLIT_AVAILABLE:
        return display_table_streamlit(content, title, source_info)
    else:
        return display_table_text(content, title, source_info)

async def display_table_chainlit(content: str, title: str, source_info: str) -> bool:
    """Affichage tableau pour Chainlit."""
    
    try:
        # Titre et source
        await cl.Message(content=f"{title}\n\n{source_info}").send()
        
        # Formater le tableau pour l'affichage
        formatted_table = format_table_for_display(content)
        await cl.Message(content=f"```\n{formatted_table}\n```").send()
        
        return True
    except Exception as e:
        print(f"‚ùå Erreur Chainlit table: {e}")
        return False

def display_table_streamlit(content: str, title: str, source_info: str) -> bool:
    """Affichage tableau pour Streamlit."""
    
    try:
        st.markdown(f"### {title}")
        st.markdown(source_info)
        
        # Essayer de parser le tableau en DataFrame
        try:
            import pandas as pd
            # Logique simple pour convertir le contenu en DataFrame
            lines = [line.strip() for line in content.split('\n') if line.strip()]
            if len(lines) > 1:
                # Premi√®re ligne = headers
                headers = re.split(r'\s{2,}|\t|\|', lines[0])
                data = []
                for line in lines[1:]:
                    row = re.split(r'\s{2,}|\t|\|', line)
                    if len(row) == len(headers):
                        data.append(row)
                
                if data:
                    df = pd.DataFrame(data, columns=headers)
                    st.dataframe(df)
                    return True
        except:
            pass
        
        # Fallback: affichage texte format√©
        formatted_table = format_table_for_display(content)
        st.text(formatted_table)
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur Streamlit table: {e}")
        return False

def display_table_text(content: str, title: str, source_info: str) -> bool:
    """Affichage textuel pour les tableaux."""
    
    print(f"\n{title}")
    print(source_info)
    formatted_table = format_table_for_display(content)
    print(f"üìã Tableau:\n{formatted_table}")
    return True
def debug_visual_elements(visual_elements):
    """Debug des √©l√©ments visuels pour diagnostic."""
    
    print(f"\nüîç DEBUG VISUAL: {len(visual_elements)} √©l√©ments d√©tect√©s")
    print("=" * 50)
    
    for i, element in enumerate(visual_elements, 1):
        metadata = element['metadata']
        print(f"\nüìä √âl√©ment {i}:")
        print(f"   Type: {element['type']}")
        print(f"   PDF: {metadata.get('pdf_name', 'N/A')}")
        print(f"   Page: {metadata.get('page_num', metadata.get('page', 'N/A'))}")
        
        # Afficher TOUTES les m√©tadonn√©es qui pourraient contenir un chemin
        image_keys = {}
        for key, value in metadata.items():
            if any(term in key.lower() for term in ['image', 'path', 'file', 'source']):
                image_keys[key] = value
        
        if image_keys:
            print(f"   üñºÔ∏è M√©tadonn√©es d'image:")
            for key, value in image_keys.items():
                print(f"      {key}: {value}")
        else:
            print(f"   ‚ùå Aucune m√©tadonn√©e d'image")
        
        print(f"   üìù Contenu: {element['content'][:100]}...")

def check_graph_corrections():
    """V√©rifie si les corrections sont appliqu√©es dans graph.py."""
    
    print("üîç V√âRIFICATION DES CORRECTIONS DANS graph.py")
    print("=" * 50)
    
    try:
        with open('src/simple_rag/graph.py', 'r', encoding='utf-8') as f:
            content = f.read()
        
        # V√©rifier la pr√©sence des corrections
        corrections = {
            'debug_visual_elements': 'def debug_visual_elements' in content,
            'find_image_path_smart': 'def find_image_path_smart' in content or 'glob.glob' in content,
            'enhanced_display': 'image_path = None' in content and 'Path(image_path).exists()' in content,
            'metadata_debug': 'M√©tadonn√©es compl√®tes' in content or 'm√©tadonn√©es d\'image' in content
        }
        
        print("Corrections appliqu√©es:")
        for correction, present in corrections.items():
            status = "‚úÖ" if present else "‚ùå"
            print(f"   {status} {correction}")
        
        if all(corrections.values()):
            print("\n‚úÖ Toutes les corrections sont appliqu√©es!")
            return True
        else:
            print("\n‚ö†Ô∏è Certaines corrections manquent")
            return False
            
    except FileNotFoundError:
        print("‚ùå Fichier graph.py non trouv√© dans src/simple_rag/")
        return False
    except Exception as e:
        print(f"‚ùå Erreur lecture: {e}")
        return False

async def display_chart_element(metadata: Dict[str, Any], content: str) -> bool:
    """Affiche un graphique avec recherche intelligente du chemin de l'image."""
    
    # Informations du graphique
    pdf_name = metadata.get('pdf_name', 'Document ANSD')
    page_num = metadata.get('page_num', metadata.get('page', 'N/A'))
    chart_type = metadata.get('chart_type', 'graphique')
    
    # Titre et source
    title = f"üìä **{chart_type.title()}**"
    source_info = f"*Source: {pdf_name}"
    if page_num != 'N/A':
        source_info += f", page {page_num}"
    source_info += "*"
    
    print(f"üé® Tentative affichage: {title}")
    print(f"üîç M√©tadonn√©es compl√®tes: {metadata}")
    
    # RECHERCHE INTELLIGENTE DU CHEMIN DE L'IMAGE
    image_path = None
    
    # M√©thode 1: Chercher dans les m√©tadonn√©es
    possible_keys = ['image_path', 'source', 'file_path', 'path', 'image_file', 'filepath']
    for key in possible_keys:
        if key in metadata and metadata[key]:
            potential_path = str(metadata[key])
            print(f"üîç Test m√©tadonn√©e {key}: {potential_path}")
            
            # Tester le chemin direct
            if Path(potential_path).exists():
                image_path = potential_path
                print(f"‚úÖ Image trouv√©e (chemin direct): {image_path}")
                break
            
            # Tester avec le dossier images/
            filename = Path(potential_path).name
            test_path = Path('images') / filename
            if test_path.exists():
                image_path = str(test_path)
                print(f"‚úÖ Image trouv√©e (dossier images): {image_path}")
                break
    
    # M√©thode 2: Construire le chemin √† partir du PDF et de la page
    if not image_path and pdf_name and page_num != 'N/A':
        import glob
        
        print(f"üîç Recherche par pattern PDF + page...")
        
        # Nettoyer le nom du PDF pour la recherche
        pdf_clean = pdf_name.replace('.pdf', '').replace(' ', '*')
        
        # Essayer diff√©rents patterns
        patterns = [
            f"images/{pdf_clean}*{page_num}*.png",
            f"images/*{pdf_clean}*{page_num}*.png",
            f"images/{pdf_clean}*p{page_num}*.png",
            f"images/*page*{page_num}*.png",
            f"images/*{page_num}*.png"
        ]
        
        for pattern in patterns:
            print(f"   Pattern: {pattern}")
            matches = glob.glob(pattern)
            if matches:
                image_path = matches[0]
                print(f"‚úÖ Image trouv√©e par pattern: {image_path}")
                break
    
    # M√©thode 3: Fallback - prendre n'importe quelle image de la page
    if not image_path and page_num != 'N/A':
        import glob
        fallback_pattern = f"images/*{page_num}*.png"
        matches = glob.glob(fallback_pattern)
        if matches:
            image_path = matches[0]
            print(f"‚úÖ Image trouv√©e (fallback): {image_path}")
    
    # AFFICHAGE DE L'IMAGE
    displayed = False
    
    if image_path and Path(image_path).exists():
        try:
            if CHAINLIT_AVAILABLE:
                # Message avec titre et source
                await cl.Message(content=f"{title}\n\n{source_info}").send()
                
                # Afficher l'image
                elements = [cl.Image(name="chart", path=str(image_path), display="inline")]
                await cl.Message(content="", elements=elements).send()
                
                # Confirmation
                await cl.Message(content=f"‚úÖ **Graphique affich√©**\nüìÅ Fichier: `{Path(image_path).name}`").send()
                
                print(f"‚úÖ IMAGE CHAINLIT AFFICH√âE: {image_path}")
                displayed = True
                
            elif STREAMLIT_AVAILABLE:
                st.markdown(f"### {title}")
                st.markdown(source_info)
                st.image(str(image_path), caption=f"Fichier: {Path(image_path).name}")
                print(f"‚úÖ IMAGE STREAMLIT AFFICH√âE: {image_path}")
                displayed = True
                
            else:
                # Console
                print(f"\n{title}")
                print(source_info)
                print(f"üñºÔ∏è IMAGE DISPONIBLE: {image_path}")
                displayed = True
                
        except Exception as e:
            print(f"‚ùå Erreur affichage image: {e}")
    
    # Si pas d'image trouv√©e, afficher la description avec diagnostic
    if not displayed:
        print(f"‚ö†Ô∏è AUCUNE IMAGE TROUV√âE")
        
        diagnostic_msg = f"""
{title}

{source_info}

‚ö†Ô∏è **Graphique non affich√© - Image manquante**

üîç **Diagnostic:**
üìÅ PDF: `{pdf_name}`
üìÑ Page: `{page_num}`
üîç M√©tadonn√©es recherch√©es: `{list(metadata.keys())}`

üìù **Description du graphique:**
{content}

üí° **Pour corriger:** V√©rifiez que l'image existe dans le dossier `images/`
"""
        
        if CHAINLIT_AVAILABLE:
            await cl.Message(content=diagnostic_msg).send()
        elif STREAMLIT_AVAILABLE:
            st.markdown(diagnostic_msg)
        else:
            print(diagnostic_msg)
    
    return True


def format_table_for_display(content: str, max_width: int = 80) -> str:
    """Formate un tableau pour l'affichage."""
    
    lines = [line.strip() for line in content.split('\n') if line.strip()]
    if not lines:
        return content
    
    # Limiter la largeur et le nombre de lignes
    formatted_lines = []
    for i, line in enumerate(lines[:10]):  # Max 10 lignes
        if len(line) > max_width:
            line = line[:max_width-3] + "..."
        formatted_lines.append(line)
    
    if len(lines) > 10:
        formatted_lines.append("... (tableau tronqu√©)")
    
    return '\n'.join(formatted_lines)

async def process_and_display_visual_elements(visual_elements: List[Dict[str, Any]], user_question: str) -> bool:
    """Traite et affiche tous les √©l√©ments visuels pertinents."""
    if not visual_elements:
        return False
    
    # AJOUTEZ CETTE LIGNE POUR LE DEBUG
    debug_visual_elements(visual_elements)
    
    print(f"üé® Traitement de {len(visual_elements)} √©l√©ments visuels...")
    

    # Message d'introduction
    intro_msg = f"üìä **Contenu visuel ANSD pertinent**\n*En rapport avec: {user_question}*\n"
    
    if CHAINLIT_AVAILABLE:
        await cl.Message(content=intro_msg).send()
    elif STREAMLIT_AVAILABLE:
        st.markdown(intro_msg)
    else:
        print(intro_msg)
    
    displayed_count = 0
    
    for i, element in enumerate(visual_elements, 1):
        try:
            success = await display_visual_element(element, user_question)
            if success:
                displayed_count += 1
        except Exception as e:
            print(f"‚ùå Erreur affichage √©l√©ment {i}: {e}")
            continue
    
    # Message de r√©sum√©
    if displayed_count > 0:
        summary = f"‚úÖ **Affichage termin√©**: {displayed_count} √©l√©ment(s) visuel(s) affich√©(s)"
        
        if CHAINLIT_AVAILABLE:
            await cl.Message(content=summary).send()
        elif STREAMLIT_AVAILABLE:
            st.success(summary)
        else:
            print(summary)
        
        return True
    
    return False

# =============================================================================
# FONCTIONS UTILITAIRES
# =============================================================================

def format_docs_with_metadata(docs) -> str:
    """Formatage avanc√© des documents avec m√©tadonn√©es enrichies pour l'ANSD."""
    
    if not docs:
        return "‚ùå Aucun document pertinent trouv√© dans la base de donn√©es ANSD."
    
    formatted_parts = []
    
    for i, doc in enumerate(docs, 1):
        # Extraction des m√©tadonn√©es
        metadata = doc.metadata if hasattr(doc, 'metadata') else {}
        
        # Informations sur la source
        source_info = []
        if 'source' in metadata:
            source_info.append(f"üìÑ Source: {metadata['source']}")
        if 'pdf_name' in metadata:
            source_info.append(f"üìã Document: {metadata['pdf_name']}")
        if 'page_num' in metadata:
            source_info.append(f"üìñ Page: {metadata['page_num']}")
        if 'indexed_at' in metadata:
            source_info.append(f"üïê Index√©: {metadata['indexed_at'][:10]}")
        
        # En-t√™te du document
        header = f"\n{'='*50}\nüìä DOCUMENT ANSD #{i}\n"
        if source_info:
            header += "\n".join(source_info) + "\n"
        header += f"{'='*50}\n"
        
        # Contenu avec nettoyage
        content = doc.page_content.strip()
        
        # D√©tecter le type de contenu
        content_indicators = []
        if any(keyword in content.lower() for keyword in ['rgph', 'recensement']):
            content_indicators.append("üèòÔ∏è RECENSEMENT")
        if any(keyword in content.lower() for keyword in ['eds', 'd√©mographique']):
            content_indicators.append("üë• D√âMOGRAPHIE")
        if any(keyword in content.lower() for keyword in ['esps', 'pauvret√©']):
            content_indicators.append("üí∞ PAUVRET√â")
        if any(keyword in content.lower() for keyword in ['√©conomie', 'pib']):
            content_indicators.append("üìà √âCONOMIE")
        
        if content_indicators:
            header += f"üè∑Ô∏è Cat√©gories: {' | '.join(content_indicators)}\n{'-'*50}\n"
        
        formatted_parts.append(f"{header}\n{content}\n")
    
    return "\n".join(formatted_parts)

# =============================================================================
# FONCTIONS PRINCIPALES AVEC SUPPORT VISUEL ET SUGGESTIONS
# =============================================================================

async def retrieve(state, *, config):
    """Fonction de r√©cup√©ration avec extraction des √©l√©ments visuels."""
    print("üîç ---RETRIEVE AVEC SUPPORT VISUEL COMPLET---")
    
    # Gestion hybride dict/dataclass
    if isinstance(state, dict):
        messages = state.get("messages", [])
        print("üìù State re√ßu comme dictionnaire")
    else:
        messages = getattr(state, "messages", [])
        print("üìù State re√ßu comme dataclass")
    
    # Extraction de la question
    question = ""
    for msg in reversed(messages):
        if hasattr(msg, 'content') and msg.content:
            question = msg.content
            break
    
    if not question:
        print("‚ùå Aucune question trouv√©e")
        return {"documents": [], "visual_elements": [], "has_visual_content": False}
    
    print(f"üìù Question: {question}")
    
    try:
        print("üìÑ R√©cup√©ration documents textuels et visuels...")
        
        # Configuration Pinecone
        safe_config = dict(config) if config else {}
        if 'configurable' not in safe_config:
            safe_config['configurable'] = {}
        
        # Augmenter le nombre de documents r√©cup√©r√©s pour capturer plus d'√©l√©ments visuels
        safe_search_kwargs = {
            "k": 20,  # Augment√© pour les √©l√©ments visuels
        }
        safe_config['configurable']['search_kwargs'] = safe_search_kwargs
        
        # Utilisation du retriever
        async with retrieval.make_retriever(safe_config) as retriever:
            documents = await retriever.ainvoke(question, safe_config)
            
            print(f"‚úÖ Documents r√©cup√©r√©s: {len(documents)}")
            
            # S√©parer les documents textuels et visuels
            text_docs, visual_elements = extract_visual_elements(documents)
            
            print(f"üìÑ Documents textuels: {len(text_docs)}")
            print(f"üé® √âl√©ments visuels bruts: {len(visual_elements)}")
            
            # Analyser la pertinence des √©l√©ments visuels
            relevant_visual_elements = analyze_visual_relevance_enhanced(visual_elements, question)
            
            print(f"üéØ √âl√©ments visuels pertinents: {len(relevant_visual_elements)}")
            
            return {
                "documents": text_docs,
                "visual_elements": relevant_visual_elements,
                "has_visual_content": len(relevant_visual_elements) > 0
            }
            
    except Exception as e:
        print(f"‚ùå Erreur lors de la r√©cup√©ration: {e}")
        import traceback
        traceback.print_exc()
        return {"documents": [], "visual_elements": [], "has_visual_content": False}


async def generate(state, *, config):
    """G√©n√©ration avec affichage automatique des √©l√©ments visuels ET suggestions de questions."""
    
    print("ü§ñ ---GENERATE AVEC VISUELS ET SUGGESTIONS COMPLET---")
    
    # Gestion hybride dict/dataclass
    if isinstance(state, dict):
        messages = state.get("messages", [])
        documents = state.get("documents", [])
        visual_elements = state.get("visual_elements", [])
        has_visual = state.get("has_visual_content", False)
        print("üìù State re√ßu comme dictionnaire")
    else:
        messages = getattr(state, "messages", [])
        documents = getattr(state, "documents", [])
        visual_elements = getattr(state, "visual_elements", [])
        has_visual = getattr(state, "has_visual_content", False)
        print("üìù State re√ßu comme dataclass")
    
    # Import des modules n√©cessaires
    try:
        configuration = RagConfiguration.from_runnable_config(config)
        model = load_chat_model(configuration.model)
    except Exception as e:
        print(f"‚ùå Erreur configuration: {e}")
        return {"messages": [AIMessage(content="‚ùå Erreur de configuration ANSD.")], "documents": documents}
    
    # Extraire la question
    user_question = ""
    for msg in messages:
        if hasattr(msg, 'content'):
            user_question = msg.content
            break
    
    print(f"‚ùì Question: {user_question}")
    print(f"üìÑ Documents disponibles: {len(documents)}")
    print(f"üé® √âl√©ments visuels disponibles: {len(visual_elements)}")
    
    try:
        # =============================================================================
        # √âTAPE 1 : AFFICHER LES √âL√âMENTS VISUELS PERTINENTS
        # =============================================================================
        
        if has_visual and visual_elements:
            print("\nüé® √âTAPE 1 : Affichage des √©l√©ments visuels...")
            await process_and_display_visual_elements(visual_elements, user_question)
        
        # =============================================================================
        # √âTAPE 2 : ESSAYER AVEC LES DOCUMENTS INDEX√âS
        # =============================================================================
        
        print("\nüîç √âTAPE 2 : Recherche dans les documents index√©s...")
        
        if documents:
            # Prompt adapt√© pour mentionner les √©l√©ments visuels
            visual_context = ""
            if has_visual:
                visual_context = f"\n\nNote: {len(visual_elements)} √©l√©ment(s) visuel(s) (graphiques/tableaux) ont √©t√© affich√©s ci-dessus en rapport avec cette question. R√©f√©rencez-les dans votre r√©ponse si pertinents."
            
            prompt_documents_only = ChatPromptTemplate.from_messages([
                ("system", f"""Vous √™tes un expert statisticien de l'ANSD. 

Analysez les documents fournis et r√©pondez √† la question en utilisant EXCLUSIVEMENT ces documents.

R√àGLES :
‚úÖ Utilisez TOUTES les informations pertinentes trouv√©es dans les documents
‚úÖ Donnez les chiffres EXACTS trouv√©s
‚úÖ Citez les sources pr√©cises (nom du document, page)
‚úÖ D√©veloppez votre r√©ponse avec les d√©tails disponibles
‚úÖ Si vous trouvez des informations partielles, pr√©sentez-les clairement

‚ùå Seulement si VRAIMENT AUCUNE information pertinente n'est trouv√©e, r√©pondez : "INFORMATION NON DISPONIBLE"

FORMAT DE R√âPONSE :

**R√âPONSE DIRECTE :**
[R√©ponse d√©taill√©e bas√©e sur les documents trouv√©s]

**DONN√âES PR√âCISES :**
- Chiffre exact : [valeurs des documents]
- Ann√©e de r√©f√©rence : [ann√©e des documents]
- Source : [nom exact du document, page X]
- M√©thodologie : [enqu√™te/recensement des documents]

**CONTEXTE ADDITIONNEL :**
[Toutes les informations compl√©mentaires trouv√©es dans les documents]

{visual_context}

DOCUMENTS DISPONIBLES :
{{context}}"""),
                ("placeholder", "{messages}")
            ])
            
            context = format_docs_with_metadata(documents)
            
            rag_chain = prompt_documents_only | model
            response_step1 = await rag_chain.ainvoke({
                "context": context,
                "messages": messages
            })
            
            response_content = response_step1.content
            
            print(f"\nüìù R√âPONSE √âTAPE 2:")
            print(f"Longueur: {len(response_content)} caract√®res")
            print(f"Aper√ßu: {response_content[:300]}...")
            
            # V√©rifier si les documents ont fourni une r√©ponse satisfaisante
            is_satisfactory = evaluate_response_quality(response_content, documents)
            
            if is_satisfactory:
                print("\n‚úÖ SUCC√àS √âTAPE 2 : R√©ponse satisfaisante trouv√©e dans les documents index√©s")
                
                # G√©n√©rer des suggestions de questions
                suggestions = await generate_question_suggestions(
                    user_question, response_content, documents, model
                )
                
                # Ajouter les sources des documents
                sources_section = create_document_sources(documents, response_content)
                
                # Construire la r√©ponse finale avec suggestions
                final_response = response_content + sources_section + suggestions
                
                enhanced_response = AIMessage(content=final_response)
                return {
                    "messages": [enhanced_response], 
                    "documents": documents,
                    "visual_elements": visual_elements,
                    "has_visual_content": has_visual
                }
            
            else:
                print("\n‚ö†Ô∏è √âCHEC √âTAPE 2 : R√©ponse jug√©e insuffisante")
                print("Passage √† l'√©tape 3...")
        
        else:
            print("‚ö†Ô∏è √âTAPE 2 IGNOR√âE : Aucun document disponible")
        
        
        # =============================================================================
        # √âTAPE 3 : UTILISER LES CONNAISSANCES ANSD EXTERNES
        # =============================================================================
        
        print("\nüåê √âTAPE 3 : Recherche dans les connaissances ANSD externes...")
        
        # Prompt pour utiliser les connaissances ANSD officielles
        visual_context = ""
        if has_visual:
            visual_context = f"\n\nNote: {len(visual_elements)} √©l√©ment(s) visuel(s) (graphiques/tableaux) ont √©t√© affich√©s ci-dessus. Mentionnez-les si ils compl√®tent votre r√©ponse."
        
        prompt_ansd_external = ChatPromptTemplate.from_messages([
            ("system", f"""Vous √™tes un expert statisticien de l'ANSD avec acc√®s aux publications officielles.

Les documents index√©s n'ont pas fourni d'information satisfaisante. Utilisez maintenant vos connaissances des rapports officiels ANSD et du site officiel.

SOURCES AUTORIS√âES :
‚úÖ Rapports officiels ANSD publi√©s
‚úÖ Site officiel ANSD (www.ansd.sn)
‚úÖ Publications des enqu√™tes ANSD (RGPH, EDS, ESPS, EHCVM, ENES)
‚úÖ Comptes nationaux officiels du S√©n√©gal

FORMAT DE R√âPONSE :

**R√âPONSE DIRECTE :**
[R√©ponse bas√©e sur les connaissances ANSD officielles]

**DONN√âES PR√âCISES :**
- Chiffre exact : [valeur des rapports ANSD]
- Ann√©e de r√©f√©rence : [ann√©e pr√©cise]
- Source : [Publication ANSD officielle]
- M√©thodologie : [enqu√™te ANSD utilis√©e]

**CONTEXTE ADDITIONNEL :**
[Informations contextuelles des publications ANSD]

**LIMITATIONS/NOTES :**
[Pr√©cautions d'interpr√©tation]

{visual_context}

IMPORTANT : Mentionnez que cette information provient des connaissances ANSD officielles, pas des documents index√©s."""),
            ("placeholder", "{messages}")
        ])
        
        rag_chain_external = prompt_ansd_external | model
        response_step2 = await rag_chain_external.ainvoke({
            "messages": messages
        })
        
        response_content = response_step2.content
        
        print("‚úÖ SUCC√àS √âTAPE 3 : R√©ponse obtenue des connaissances ANSD")
        
        # G√©n√©rer des suggestions de questions pour les connaissances externes
        suggestions = await generate_question_suggestions(
            user_question, response_content, [], model
        )
        
        # Ajouter les sources externes
        sources_section = create_external_ansd_sources(response_content)
        
        # Construire la r√©ponse finale avec suggestions
        final_response = response_content + sources_section + suggestions
        
        enhanced_response = AIMessage(content=final_response)
        return {
            "messages": [enhanced_response], 
            "documents": documents,
            "visual_elements": visual_elements,
            "has_visual_content": has_visual
        }
    
    except Exception as e:
        print(f"‚ùå ERREUR G√âN√âRATION: {e}")
        import traceback
        traceback.print_exc()
        
        # Fallback final
        fallback_response = AIMessage(content=
            "‚ùå Informations non disponibles dans les documents index√©s et les sources ANSD consult√©es. "
            "Veuillez consulter directement l'ANSD (www.ansd.sn) pour cette information sp√©cifique."
        )
        return {
            "messages": [fallback_response], 
            "documents": documents,
            "visual_elements": visual_elements,
            "has_visual_content": has_visual
        }

# =============================================================================
# FONCTIONS DE SUGGESTIONS DE QUESTIONS
# =============================================================================

async def generate_question_suggestions(user_question, response_content, documents, model):
    """G√©n√®re des suggestions de questions suivantes contextuelles."""
    
    print("\nüîÆ G√âN√âRATION DES SUGGESTIONS DE QUESTIONS...")
    
    try:
        # Analyser le contexte pour les suggestions
        document_topics = extract_topics_from_documents(documents) if documents else []
        response_topics = extract_topics_from_response(response_content)
        
        # Prompt pour g√©n√©rer des suggestions contextuelles
        suggestions_prompt = ChatPromptTemplate.from_messages([
            ("system", """Vous √™tes un expert ANSD qui aide les utilisateurs √† explorer les statistiques du S√©n√©gal.

Bas√© sur la question pos√©e et la r√©ponse fournie, g√©n√©rez 4 questions de suivi pertinentes et sp√©cifiques au contexte ANSD.

R√àGLES POUR LES SUGGESTIONS :
‚úÖ Questions COMPL√âMENTAIRES √† la question originale
‚úÖ Utilisez la terminologie ANSD (RGPH, EDS, ESPS, EHCVM, ENES)
‚úÖ Questions sp√©cifiques au S√©n√©gal et aux donn√©es disponibles
‚úÖ M√©langez diff√©rents angles : temporel, g√©ographique, th√©matique, m√©thodologique
‚úÖ Questions qui approfondissent ou √©largissent le sujet
‚úÖ √âvitez de r√©p√©ter la question originale

TYPES DE QUESTIONS √Ä PRIVIL√âGIER :
üîç Comparaisons temporelles (√©volution, tendances)
üó∫Ô∏è Analyses g√©ographiques (r√©gions, d√©partements)
üë• Segmentations d√©mographiques (√¢ge, sexe, milieu)
üìä Indicateurs connexes ou compl√©mentaires
üî¨ Aspects m√©thodologiques des enqu√™tes
üí° Implications politiques ou sociales

FORMAT EXACT :
**‚ùì QUESTIONS SUGG√âR√âES :**

1. [Question sur l'√©volution temporelle ou comparaison entre p√©riodes]

2. [Question sur la r√©partition g√©ographique ou variations r√©gionales]

3. [Question sur un indicateur connexe ou compl√©mentaire]

4. [Question m√©thodologique ou d'approfondissement th√©matique]

CONTEXTE QUESTION ORIGINALE :
{original_question}

TH√àMES IDENTIFI√âS DANS LA R√âPONSE :
{response_topics}

TH√àMES DISPONIBLES DANS LES DOCUMENTS :
{document_topics}"""),
            ("user", "G√©n√©rez maintenant 4 suggestions de questions de suivi pertinentes.")
        ])
        
        # Pr√©parer le contexte pour les suggestions
        context_data = {
            "original_question": user_question,
            "response_topics": ", ".join(response_topics) if response_topics else "Analyse g√©n√©rale",
            "document_topics": ", ".join(document_topics) if document_topics else "Documents g√©n√©raux ANSD"
        }
        
        # G√©n√©rer les suggestions
        suggestions_chain = suggestions_prompt | model
        suggestions_response = await suggestions_chain.ainvoke(context_data)
        
        suggestions_content = suggestions_response.content
        
        print(f"‚úÖ Suggestions g√©n√©r√©es: {len(suggestions_content)} caract√®res")
        
        return f"\n\n{suggestions_content}"
        
    except Exception as e:
        print(f"‚ùå Erreur g√©n√©ration suggestions: {e}")
        
        # Suggestions de fallback basiques
        fallback_suggestions = generate_fallback_suggestions(user_question)
        return f"\n\n{fallback_suggestions}"

def extract_topics_from_documents(documents):
    """Extrait les th√®mes principaux des documents."""
    
    if not documents:
        return []
    
    topics = set()
    
    # Mots-cl√©s th√©matiques ANSD
    ansd_keywords = {
        'd√©mographie': ['population', 'habitants', 'd√©mographique', 'natalit√©', 'mortalit√©'],
        '√©conomie': ['√©conomie', 'pib', 'revenus', 'emploi', 'secteur'],
        '√©ducation': ['√©ducation', 'scolarisation', 'alphab√©tisation', '√©cole'],
        'sant√©': ['sant√©', 'maternelle', 'vaccination', 'morbidit√©'],
        'pauvret√©': ['pauvret√©', 'pauvre', 'indigence', 'vuln√©rabilit√©'],
        'g√©ographie': ['r√©gion', 'd√©partement', 'urbain', 'rural', 'dakar'],
        'enqu√™tes': ['rgph', 'eds', 'esps', 'ehcvm', 'enes', 'recensement']
    }
    
    # Analyser le contenu des documents
    combined_content = " ".join([doc.page_content.lower() for doc in documents if hasattr(doc, 'page_content')])
    
    for theme, keywords in ansd_keywords.items():
        if any(keyword in combined_content for keyword in keywords):
            topics.add(theme)
    
    return list(topics)

def extract_topics_from_response(response_content):
    """Extrait les th√®mes principaux de la r√©ponse."""
    
    topics = []
    response_lower = response_content.lower()
    
    # D√©tection de th√®mes sp√©cifiques
    if any(term in response_lower for term in ['population', 'habitants', 'd√©mographique']):
        topics.append('d√©mographie')
    
    if any(term in response_lower for term in ['√©conomie', 'pib', 'croissance', 'secteur']):
        topics.append('√©conomie')
    
    if any(term in response_lower for term in ['pauvret√©', 'pauvre', 'indigence']):
        topics.append('pauvret√©')
    
    if any(term in response_lower for term in ['emploi', 'travail', 'ch√¥mage']):
        topics.append('emploi')
    
    if any(term in response_lower for term in ['√©ducation', '√©cole', 'scolarisation']):
        topics.append('√©ducation')
    
    if any(term in response_lower for term in ['sant√©', 'mortalit√©', 'morbidit√©']):
        topics.append('sant√©')
    
    if any(term in response_lower for term in ['r√©gion', 'd√©partement', 'g√©ographique']):
        topics.append('g√©ographie')
    
    return topics

def generate_fallback_suggestions(user_question):
    """G√©n√®re des suggestions de base si l'IA √©choue."""
    
    question_lower = user_question.lower()
    
    # Suggestions bas√©es sur le contenu de la question
    if any(term in question_lower for term in ['population', 'habitants']):
        return """**‚ùì QUESTIONS SUGG√âR√âES :**

1. Quelle est l'√©volution de la population s√©n√©galaise entre les diff√©rents recensements ?

2. Comment la population se r√©partit-elle entre les r√©gions du S√©n√©gal ?

3. Quels sont les indicateurs d√©mographiques cl√©s (taux de natalit√©, mortalit√©) ?

4. Quelle est la r√©partition de la population par groupes d'√¢ge et par sexe ?"""
    
    elif any(term in question_lower for term in ['pauvret√©', 'pauvre']):
        return """**‚ùì QUESTIONS SUGG√âR√âES :**

1. Comment le taux de pauvret√© a-t-il √©volu√© au S√©n√©gal ces derni√®res ann√©es ?

2. Quelles sont les r√©gions les plus touch√©es par la pauvret√© ?

3. Quels sont les profils des m√©nages pauvres selon l'ESPS ?

4. Quelles sont les strat√©gies gouvernementales de lutte contre la pauvret√© ?"""
    
    elif any(term in question_lower for term in ['emploi', 'travail']):
        return """**‚ùì QUESTIONS SUGG√âR√âES :**

1. Quelle est l'√©volution du taux de ch√¥mage au S√©n√©gal ?

2. Comment l'emploi se r√©partit-il par secteur d'activit√© ?

3. Quels sont les d√©fis de l'emploi des jeunes selon l'ENES ?

4. Quelle est la part de l'emploi informel dans l'√©conomie s√©n√©galaise ?"""
    
    else:
        # Suggestions g√©n√©riques
        return """**‚ùì QUESTIONS SUGG√âR√âES :**

1. Quels sont les derniers r√©sultats du RGPH-5 sur la population s√©n√©galaise ?

2. Comment les indicateurs sociaux ont-ils √©volu√© selon les enqu√™tes ANSD ?

3. Quelles sont les principales disparit√©s r√©gionales observ√©es ?

4. Quels d√©fis m√©thodologiques pose la collecte de donn√©es au S√©n√©gal ?"""

# =============================================================================
# FONCTIONS D'√âVALUATION ET DE SOURCES
# =============================================================================

def evaluate_response_quality(response_content, documents):
    """√âvaluation CORRIG√âE - Moins stricte pour accepter les r√©ponses des documents."""
    
    response_lower = response_content.lower()
    
    print(f"üîç √âVALUATION DE LA R√âPONSE:")
    print(f"   Longueur: {len(response_content)} caract√®res")
    print(f"   Aper√ßu: {response_content[:150]}...")
    
    # Crit√®res d'√©chec STRICTS (r√©ponse clairement insuffisante)
    failure_indicators = [
        "information non disponible",
        "cette information n'est pas disponible",
        "aucune information",
        "pas disponible dans les documents",
        "impossible de r√©pondre",
        "donn√©es non pr√©sentes",
        "ne peut pas r√©pondre",
        "informations insuffisantes"
    ]
    
    # Si contient un indicateur d'√©chec EXPLICITE
    for indicator in failure_indicators:
        if indicator in response_lower:
            print(f"   ‚ùå √âCHEC: Contient '{indicator}'")
            return False
    
    # Crit√®res de succ√®s ASSOUPLIS
    success_indicators = {
        'has_numbers': bool(re.search(r'\d+', response_content)),
        'has_content': len(response_content) > 100,
        'has_words': len(response_content.split()) > 20,
        'has_structure': '**' in response_content or '-' in response_content,
        'mentions_documents': any(term in response_lower for term in ['chapitre', 'page', 'document', 'source']),
        'has_specific_content': any(term in response_lower for term in [
            'r√©partition', 'secteur', 'occup√©s', 'institutionnel', 'emploi', 'travail',
            'population', 'habitants', 'taux', 'pourcentage', 'statistique'
        ])
    }
    
    print(f"   üìä Crit√®res d√©taill√©s:")
    for criterion, passed in success_indicators.items():
        status = "‚úÖ" if passed else "‚ùå"
        print(f"      {status} {criterion}")
    
    success_count = sum(success_indicators.values())
    
    # SEUIL R√âDUIT : 2 crit√®res au lieu de 3
    is_satisfactory = success_count >= 2
    
    print(f"   üìà Score: {success_count}/6 crit√®res")
    print(f"   üéØ R√©sultat: {'‚úÖ SATISFAISANT' if is_satisfactory else '‚ùå INSUFFISANT'}")
    
    return is_satisfactory

def create_document_sources(documents, response_content):
    """Cr√©e la section sources pour les documents index√©s."""
    
    sources_section = "\n\nüìö **Sources utilis√©es (Documents index√©s):**\n"
    
    # Extraire les documents r√©ellement pertinents
    relevant_docs = []
    response_lower = response_content.lower()
    
    for doc in documents:
        if hasattr(doc, 'page_content'):
            doc_content = doc.page_content.lower()
            metadata = doc.metadata if hasattr(doc, 'metadata') else {}
            
            # V√©rifier si le document a √©t√© utilis√© (overlap de contenu)
            doc_words = set(doc_content.split())
            response_words = set(response_lower.split())
            
            # Mots significatifs communs
            significant_words = {word for word in doc_words.intersection(response_words) 
                               if len(word) > 4}
            
            # Si overlap significatif OU donn√©es num√©riques communes
            doc_numbers = set(re.findall(r'\d+[.,]?\d*', doc_content))
            response_numbers = set(re.findall(r'\d+[.,]?\d*', response_lower))
            
            if len(significant_words) > 2 or doc_numbers.intersection(response_numbers):
                doc_name = metadata.get('pdf_name', 'Document ANSD')
                page_num = metadata.get('page_num', 'Non sp√©cifi√©e')
                
                if '/' in doc_name:
                    doc_name = doc_name.split('/')[-1]
                
                formatted = f"{doc_name}, page {page_num}" if page_num != 'Non sp√©cifi√©e' else doc_name
                relevant_docs.append(formatted)
    
    # Ajouter les sources ou fallback
    if relevant_docs:
        for doc in relevant_docs[:5]:  # Max 5 sources
            sources_section += f"‚Ä¢ {doc}\n"
    else:
        # Si aucun document sp√©cifique identifi√©, utiliser tous
        for doc in documents[:3]:  # Max 3 sources
            metadata = doc.metadata if hasattr(doc, 'metadata') else {}
            doc_name = metadata.get('pdf_name', 'Document ANSD')
            page_num = metadata.get('page_num', 'Non sp√©cifi√©e')
            
            if '/' in doc_name:
                doc_name = doc_name.split('/')[-1]
            
            formatted = f"{doc_name}, page {page_num}" if page_num != 'Non sp√©cifi√©e' else doc_name
            sources_section += f"‚Ä¢ {formatted}\n"
    
    return sources_section

def create_external_ansd_sources(response_content):
    """Cr√©e la section sources pour les connaissances ANSD externes."""
    
    sources_section = "\n\nüìö **Sources officielles :**\n"
    
    response_lower = response_content.lower()
    
    # D√©tecter les sources sp√©cifiques mentionn√©es dans la r√©ponse
    detected_sources = []
    
    # Enqu√™tes sp√©cifiques
    if 'ehcvm' in response_lower or 'conditions de vie' in response_lower:
        detected_sources.append("‚Ä¢ ANSD - Enqu√™te Harmonis√©e sur les Conditions de Vie des M√©nages (EHCVM), 2018-2019")
    
    if 'esps' in response_lower or 'pauvret√©' in response_lower:
        detected_sources.append("‚Ä¢ ANSD - Enqu√™te de Suivi de la Pauvret√© au S√©n√©gal (ESPS), 2018-2019")
    
    if 'eds' in response_lower or 'd√©mographique et sant√©' in response_lower:
        detected_sources.append("‚Ä¢ ANSD - Enqu√™te D√©mographique et de Sant√© (EDS), 2023")
    
    if 'rgph' in response_lower or 'recensement' in response_lower:
        detected_sources.append("‚Ä¢ ANSD - Recensement G√©n√©ral de la Population et de l'Habitat (RGPH), 2023")
    
    if 'enes' in response_lower or 'emploi' in response_lower:
        detected_sources.append("‚Ä¢ ANSD - Enqu√™te Nationale sur l'Emploi au S√©n√©gal (ENES), 2021")
    
    # Publications √©conomiques
    if 'pib' in response_lower or 'comptes nationaux' in response_lower:
        detected_sources.append("‚Ä¢ ANSD - Comptes Nationaux du S√©n√©gal, 2023")
    
    if 'prix' in response_lower or 'inflation' in response_lower:
        detected_sources.append("‚Ä¢ ANSD - Indices des Prix √† la Consommation, 2024")
    
    # Toujours ajouter le site officiel
    detected_sources.append("‚Ä¢ Site officiel ANSD (www.ansd.sn)")
    
    # Ajouter note explicative
    sources_section += "‚Ä¢ **Note :** Informations issues des connaissances des publications ANSD officielles\n"
    
    # Ajouter les sources d√©tect√©es (max 4 pour √©viter la surcharge)
    for source in detected_sources[:4]:
        sources_section += f"{source}\n"
    
    return sources_section

# =============================================================================
# CONFIGURATION DU WORKFLOW AVEC SUPPORT VISUEL COMPLET
# =============================================================================

workflow = StateGraph(GraphState, input=InputState, config_schema=RagConfiguration)

# Define the nodes
workflow.add_node("retrieve", retrieve)
workflow.add_node("generate", generate)

# Build graph
workflow.add_edge(START, "retrieve")
workflow.add_edge("retrieve", "generate")
workflow.add_edge("generate", END)

# Compile
graph = workflow.compile()
graph.name = "ImprovedSimpleRagWithVisualsAndSuggestions"