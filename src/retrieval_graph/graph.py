"""Simple RAG am√©lior√© avec de meilleures capacit√©s de r√©cup√©ration et de r√©ponse."""

from langchain_core.messages import HumanMessage
from langchain_core.prompts import ChatPromptTemplate
from langgraph.graph import END, START, StateGraph

from shared import retrieval
from shared.utils import load_chat_model, format_docs
from simple_rag.configuration import RagConfiguration
from simple_rag.state import GraphState, InputState


# Prompt am√©lior√©
SIMPLE_RAG_SYSTEM_PROMPT = """Vous √™tes un expert statisticien de l'ANSD (Agence Nationale de la Statistique et de la D√©mographie du S√©n√©gal), sp√©cialis√© dans l'analyse de donn√©es d√©mographiques, √©conomiques et sociales du S√©n√©gal.

MISSION PRINCIPALE :
R√©pondre de mani√®re compl√®te et approfondie aux questions sur les statistiques du S√©n√©gal en utilisant PRIORITAIREMENT les documents fournis et en compl√©tant avec vos connaissances des publications officielles de l'ANSD.

SOURCES AUTORIS√âES :
‚úÖ Documents fournis dans le contexte (PRIORIT√â ABSOLUE)
‚úÖ Connaissances des rapports officiels ANSD publi√©s
‚úÖ Donn√©es du site officiel ANSD (www.ansd.sn)
‚úÖ Publications officielles des enqu√™tes ANSD (RGPH, EDS, ESPS, EHCVM, ENES)
‚úÖ Comptes nationaux et statistiques √©conomiques officielles du S√©n√©gal
‚úÖ Projections d√©mographiques officielles de l'ANSD

‚ùå SOURCES INTERDITES :
‚ùå Donn√©es d'autres pays pour combler les lacunes
‚ùå Estimations personnelles non bas√©es sur les sources ANSD
‚ùå Informations non officielles ou de sources tierces
‚ùå Projections personnelles non document√©es

R√àGLES DE R√âDACTION :
‚úÖ R√©ponse directe : SANS limitation de phrases - d√©veloppez autant que n√©cessaire
‚úÖ Contexte additionnel : SANS limitation - incluez toutes les informations pertinentes
‚úÖ Citez TOUJOURS vos sources pr√©cises (document + page ou publication ANSD)
‚úÖ Distinguez clairement les donn√©es des documents fournis vs connaissances ANSD
‚úÖ Donnez les chiffres EXACTS quand disponibles
‚úÖ Pr√©cisez SYST√âMATIQUEMENT les ann√©es de r√©f√©rence
‚úÖ Mentionnez les m√©thodologies d'enqu√™te

FORMAT DE R√âPONSE OBLIGATOIRE :

**R√âPONSE DIRECTE :**
[D√©veloppez la r√©ponse de mani√®re compl√®te et d√©taill√©e, sans limitation de longueur. Incluez tous les √©l√©ments pertinents pour une compr√©hension approfondie du sujet. Vous pouvez utiliser plusieurs paragraphes et d√©velopper les aspects importants.]

**DONN√âES PR√âCISES :**
- Chiffre exact : [valeur exacte avec unit√©]
- Ann√©e de r√©f√©rence : [ann√©e pr√©cise]
- Source : [nom exact du document, page X OU publication ANSD officielle]
- M√©thodologie : [enqu√™te/recensement utilis√©]

**CONTEXTE ADDITIONNEL :**
[D√©veloppez largement avec toutes les informations compl√©mentaires pertinentes, sans limitation de longueur. Incluez :
- √âvolutions temporelles et tendances
- Comparaisons r√©gionales ou d√©mographiques
- M√©thodologies d√©taill√©es
- Contexte socio-√©conomique
- Implications et analyses
- Donn√©es connexes des autres enqu√™tes ANSD
- Informations contextuelles des rapports officiels ANSD
Organisez en paragraphes clairs et d√©veloppez chaque aspect important.]

**LIMITATIONS/NOTES :**
[Pr√©cautions d'interpr√©tation, changements m√©thodologiques, d√©finitions sp√©cifiques]

INSTRUCTIONS POUR LES SOURCES :
- Documents fournis : "Document.pdf, page X"
- Connaissances ANSD officielles : "ANSD - [Nom de l'enqu√™te/rapport], [ann√©e]"
- Site officiel : "Site officiel ANSD (www.ansd.sn)"
- Distinguez clairement : "Selon les documents fournis..." vs "D'apr√®s les publications ANSD..."

Si aucune information n'est disponible (documents + connaissances ANSD) :
"‚ùå Cette information n'est pas disponible dans les documents fournis ni dans les publications ANSD consult√©es. 
üìû Pour obtenir cette donn√©e sp√©cifique, veuillez consulter directement l'ANSD (www.ansd.sn) ou leurs services techniques sp√©cialis√©s."

DOCUMENTS ANSD DISPONIBLES :
{context}

Analysez maintenant ces documents et r√©pondez √† la question de l'utilisateur de mani√®re compl√®te et approfondie."""


def preprocess_query(query: str) -> str:
    """Pr√©traitement de la requ√™te pour am√©liorer la recherche."""
    # Ajouter des termes synonymes pour am√©liorer la recherche
    query_lower = query.lower()
    
    # Dictionnaire de synonymes/termes connexes
    synonyms = {
        "population": ["habitants", "d√©mographie", "recensement", "nombre d'habitants"],
        "√©conomie": ["PIB", "croissance", "√©conomique", "revenus"],
        "pauvret√©": ["pauvre", "indigence", "vuln√©rabilit√©"],
        "√©ducation": ["√©cole", "alphab√©tisation", "scolarisation"],
        "sant√©": ["mortalit√©", "morbidit√©", "esp√©rance de vie"],
        "emploi": ["ch√¥mage", "travail", "activit√© √©conomique"],
    }
    
    # Enrichir la requ√™te avec des synonymes pertinents
    enriched_terms = []
    for key, values in synonyms.items():
        if key in query_lower:
            enriched_terms.extend(values[:2])  # Ajouter 2 synonymes max
    
    if enriched_terms:
        return f"{query} {' '.join(enriched_terms)}"
    
    return query


async def retrieve(state: GraphState, *, config: RagConfiguration) -> dict[str, list | str]: 
    """R√©cup√©ration am√©lior√©e de documents."""
    print("---RETRIEVE AM√âLIOR√â---")
    
    # Extraire et pr√©traiter la question
    question = " ".join(msg.content for msg in state.messages if isinstance(msg, HumanMessage))
    processed_question = preprocess_query(question)
    
    print(f"Question originale: {question}")
    print(f"Question enrichie: {processed_question}")

    # Configuration de recherche am√©lior√©e
    enhanced_config = dict(config)
    if 'configurable' not in enhanced_config:
        enhanced_config['configurable'] = {}
    
    # Param√®tres de recherche optimis√©s
    enhanced_config['configurable']['search_kwargs'] = {
        'k': 15,  # R√©cup√©rer plus de documents
        'fetch_k': 50,  # Chercher dans plus de candidats
    }

    # R√©cup√©ration
    with retrieval.make_retriever(enhanced_config) as retriever:
        documents = retriever.invoke(processed_question)
    
    print(f"Nombre de documents r√©cup√©r√©s: {len(documents)}")
    
    # Filtrer et scorer les documents (optionnel)
    scored_documents = []
    for doc in documents:
        content_lower = doc.page_content.lower()
        score = 0
        
        # Simple scoring bas√© sur les mots-cl√©s de la question
        question_words = question.lower().split()
        for word in question_words:
            if len(word) > 3:  # Ignorer les mots tr√®s courts
                score += content_lower.count(word)
        
        scored_documents.append((score, doc))
    
    # Trier par score et garder les meilleurs
    scored_documents.sort(key=lambda x: x[0], reverse=True)
    best_documents = [doc for score, doc in scored_documents[:10]]  # Top 10
    
    print(f"Documents s√©lectionn√©s apr√®s scoring: {len(best_documents)}")
    
    return {"documents": best_documents, "messages": state.messages}


async def generate(state: GraphState, *, config: RagConfiguration):
    """G√©n√©ration am√©lior√©e de r√©ponse."""
    print("---GENERATE AM√âLIOR√â---")
    
    messages = state.messages
    documents = state.documents

    # Cr√©ation du prompt am√©lior√©
    prompt = ChatPromptTemplate.from_messages([
        ("system", SIMPLE_RAG_SYSTEM_PROMPT),
        ("placeholder", "{messages}")
    ])
    
    configuration = RagConfiguration.from_runnable_config(config)
    model = load_chat_model(configuration.model)

    # Formatage am√©lior√© des documents avec m√©tadonn√©es
    def format_docs_with_metadata(docs):
        if not docs:
            return "Aucun document pertinent trouv√©."
        
        formatted = []
        for i, doc in enumerate(docs, 1):
            metadata_info = ""
            if doc.metadata:
                source = doc.metadata.get('source', 'Source inconnue')
                metadata_info = f" (Source: {source})"
            
            formatted.append(f"Document {i}{metadata_info}:\n{doc.page_content}\n")
        
        return "\n".join(formatted)

    # Cha√Æne am√©lior√©e
    rag_chain = prompt | model
    
    # G√©n√©ration avec contexte enrichi
    context = format_docs_with_metadata(documents)
    
    print(f"Contexte g√©n√©r√© (premiers 300 caract√®res): {context[:300]}...")
    
    response = await rag_chain.ainvoke({
        "context": context,
        "messages": messages
    })
    
    print(f"R√©ponse g√©n√©r√©e: {response.content[:200]}...")
    
    return {"messages": [response], "documents": documents}


# Configuration du workflow
workflow = StateGraph(GraphState, input=InputState, config_schema=RagConfiguration)

# D√©finir les n≈ìuds
workflow.add_node("retrieve", retrieve)
workflow.add_node("generate", generate)

# Construire le graphe
workflow.add_edge(START, "retrieve")
workflow.add_edge("retrieve", "generate")
workflow.add_edge("generate", END)

# Compiler
graph = workflow.compile()
graph.name = "ImprovedSimpleRag"